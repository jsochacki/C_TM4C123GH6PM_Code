/*

Author: Mason Edgar
Supervisor: John Sochacki
ViaSat Inc. Tempe, AZ

Master Code For TivaC PLL Control

*/


#include <stdint.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <math.h>
#include "inc/tm4c123gh6pm.h"
#include "inc/hw_adc.h"
#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "inc/hw_sysctl.h"
#include "inc/hw_gpio.h"
#include "inc/hw_types.h"
#include "inc/hw_ssi.h"
#include "inc/hw_uart.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "driverlib/timer.h"
#include "driverlib/pin_map.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "driverlib/debug.h"
#include "driverlib/adc.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"
#include "driverlib/ssi.h"
#include "driverlib/fpu.h"
#include "Synth_API_Macro_Definitions.h"
#include "Synth_API_SPI_Setup.h"
#include "Synth_API_Console_Functions.h"
#include "Synth_API_Preface_Registers.h"
#include "Synth_API_Control_Registers.h"
#include "Synth_API_Status_Registers.h"
#include "Synth_API_Hibernation_Setup.h"


char new_line[] = "\n\r";

// Making F_pfd values global so they can be automatically sent to the output control

int internalRefFactor;
double InternalReferenceValue;


int main(void) {
	

	char user_input[MAX_INPUT_LENGTH], command[50], value[20];

	setupClock();
	initConsole();
	initHibernationModule();
	setupChipSelect(CS_ACTIVE_LOW);
	setupSPI_8Bit();
	initPrefaceRegisters();


	while(1){

		clearArray(user_input, 100);
		clearArray(command, 50);
		clearArray(value, 20);

		getString(user_input);
		parseString(user_input, command, value);


		if(!strncmp(user_input, "setFrequency", 12)){

			char out[20], intMode[3];
			int out_factor, intModeDecision;
			double output_freq, result;
			unsigned short nINT;
			unsigned long nFRAC, nMOD;

			clearArray(out, 20);
			clearArray(intMode, 3);
			printString(new_line);
			printString(new_line);
			printString("Integer mode? (\"y\" for integer, \"n\" for fractional): ");
			getString(intMode);
			intModeDecision = ConvertStringToBool(intMode);
			output_freq = ConvertStringToFrequency(value, &out_factor);
			result = GenerateFrequencyRatio(output_freq, out_factor, InternalReferenceValue, internalRefFactor);
			DetermineFeedbackValues(result, intModeDecision, &nINT, &nFRAC, &nMOD);
			SetFeedbackControlValues(nINT, nFRAC, nMOD);
			printString(new_line);
			printString(new_line);
			printString("Frequency set to ");
			printString(value);
			printString(new_line);
			printString(new_line);
			printString("Enter command: ");
		}

		else if(!strncmp(user_input, "setReference", 12)){

			char externalReference[20], refDivider[20], refDoubler[5], multEnable[5], multiplier[20], AutoTune[5];
			double ExternalReferenceValue, RefFreqRatio;
			int externalRefFactor, AutoTuneSelected, refDoublerEnabled, multEnabled, multActive, MultPwr;
			unsigned long MultValue, R_Divider;

			InternalReferenceValue = ConvertStringToFrequency(value, &internalRefFactor);
			printString(new_line);
			printString(new_line);
			printString("What is the externally applied REF_IN? ");
			getString(externalReference);
			ExternalReferenceValue = ConvertStringToFrequency(externalReference, &externalRefFactor);
			RefFreqRatio = GenerateFrequencyRatio(InternalReferenceValue, internalRefFactor, ExternalReferenceValue, externalRefFactor);
			printString(new_line);
			printString(new_line);
			printString("Automatically optimize for phase noise performance? (y/n) [\"n\" for custom tuning]: ");
			getString(AutoTune);
			AutoTuneSelected = ConvertStringToBool(AutoTune);

			if(AutoTuneSelected){
				OptimizeReferenceForPhaseNoise(RefFreqRatio, &MultValue, &R_Divider);
				SetupInputControlRegisters(SINGLE_ENDED_INPUT, REF_DOUBLER_ENABLE, MULT_ENABLE, MULT_ACTIVE, R_Divider, MultValue, MULT_PWRD_UP);
				printString(new_line);
				printString(new_line);
				printString("Internal reference set to ");
				printString(value);
				printString(new_line);
				printString(new_line);
				printString("Enter command: ");
			}

			else{
				printString(new_line);
				printString(new_line);
				printString("Enable the reference doubler? (y/n): ");
				getString(refDoubler);
				printString(new_line);
				printString(new_line);
				printString("Enable the multiplier block? This will be multiplied with the REF doubler. (y/n): ");
				getString(multEnable);
				refDoublerEnabled = ConvertStringToBool(refDoubler);
				multEnabled = ConvertStringToBool(multEnable);

				if(multEnabled){
					printString(new_line);
					printString(new_line);
					printString("Enter the desired multiplier value (2'd - 63'd): ");
					getString(multiplier);
					MultValue = ConvertStringToNumber(multiplier);
					MultPwr = MULT_PWRD_UP;
				}
				else {
					MultValue = 1;
					MultPwr = MULT_PWRD_DWN;
				}

				multActive = multEnabled;
				printString(new_line);
				printString(new_line);
				printString("Enter the desired reference divider value (1'd - 1023'd): ");
				getString(refDivider);
				R_Divider = ConvertStringToNumber(refDivider);
				SetupInputControlRegisters(SINGLE_ENDED_INPUT, refDoublerEnabled, multEnabled, multActive, R_Divider, MultValue, MultPwr);
				printString(new_line);
				printString(new_line);
				printString("Enter command: ");
			}

		}

		else if(!strncmp(user_input, "setOutputPower", 14)){

			char RF_OUTB[3], outDoubler[3], outDivider[5], MuteUntilLD[3], QA_pwr[10], QB_pwr[10];
			int RF_OUTB_Result, outDoublerResult, MuteUntilLDResult;
			unsigned long QA_pwrResult, QB_pwrResult = 0, outDividerResult;

			printString(new_line);
			printString(new_line);
			printString("Available power settings: -2dBm to +12dBm in steps of 2dBm");
			printString(new_line);
			printString(new_line);
			printString("Power setting for RF_OUTA (Ex. \"+2dBm\"): ");
			getString(QA_pwr);
			QA_pwrResult = ConvertStringToPowerSetting(QA_pwr);
			printString(new_line);
			printString(new_line);
			printString("Do you want to also use the auxiliary RF_OUTB? (y/n): ");
			getString(RF_OUTB);
			printString(new_line);
			printString(new_line);
			RF_OUTB_Result = ConvertStringToBool(RF_OUTB);

			if(RF_OUTB_Result){
				printString("Power setting for RF_OUTB (Ex. \"+2dBm\"): ");
				getString(QB_pwr);
				QB_pwrResult = ConvertStringToPowerSetting(QB_pwr);
				printString(new_line);
				printString(new_line);
			}

			printString("Enable the output doubler? (y/n): ");
			getString(outDoubler);
			printString(new_line);
			printString(new_line);
			printString("Set the output divider value (1, 2, 4, 8, 16, 32): ");
			getString(outDivider);
			printString(new_line);
			printString(new_line);
			outDoublerResult = ConvertStringToBool(outDoubler);
			outDividerResult = ConvertStringToNumber(outDivider);
			printString("Mute outputs until lock has been detected? (y/n): ");
			getString(MuteUntilLD);
			MuteUntilLDResult = ConvertStringToBool(MuteUntilLD);
			SetupOutputControl(true, QA_pwrResult, RF_OUTB_Result, QB_pwrResult, MuteUntilLDResult, outDoublerResult, outDividerResult);
			printString(new_line);
			printString(new_line);
			printString("Enter command: ");
		}

		else if(!strncmp(user_input, "lockStatus", 10)){

			ReadFromStatusRegisters("DigLock");
			printString("Enter command: ");
		}

		else if(!strncmp(user_input, "setupChargePump", 15)){

			char charge_current[10], delta[10], bleeder_current[10], CP_HiZ[5];
			unsigned long NMOS_Current = 0, PMOS_Current = 0, bleederValue = 0;
			int ChargePumpHiZ;

			printString(new_line);
			printString(new_line);
			printString("Put charge pump into high impedance mode? (y/n)");
			getString(CP_HiZ);
			ChargePumpHiZ = ConvertStringToBool(CP_HiZ);

			if(ChargePumpHiZ){ SetupChargePump(PMOS_Current, NMOS_Current, ChargePumpHiZ, bleederValue); }

			else{
				printString("Available charge pump currents: 166.66uA to 10.66mA in 166.66uA increments");
				printString(new_line);
				printString(new_line);
				printString("Set desired charge pump current [mA]: ");
				getString(charge_current);
				printString(new_line);
				printString(new_line);
				printString("Set the desired difference between PMOS and NMOS currents (166.66uA increment) [mA]: ");
				getString(delta);
				PMOS_Current = ConvertStringToChargePumpCurrent(charge_current, false, "");
				NMOS_Current = ConvertStringToChargePumpCurrent(charge_current, true, delta);
				printString(new_line);
				printString(new_line);
				printString("Available bleeder currents: 0uA to 166uA in 5.33uA increments");
				printString(new_line);
				printString(new_line);
				printString("Set the desired bleeder current [uA]: ");
				getString(bleeder_current);
				printString(new_line);
				printString(new_line);
				bleederValue = ConvertStringToBleederCurrent(bleeder_current);
				SetupChargePump(PMOS_Current, NMOS_Current, ChargePumpHiZ, bleederValue);
			}

		}

		else if(!strncmp(user_input, "sleep", 5)){

			printString(new_line);
			printString(new_line);
			printString("Going to sleep...");
			printString(new_line);
			printString(new_line);
			MAP_SysCtlDelay(100000);
			MAP_GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, 0x00);
			MAP_HibernateRequest();
			while(1){ };
		}

		else{
			printString(new_line);
			printString(new_line);
			printString("Command not recognized...");
			printString(new_line);
			printString(new_line);
			printString(new_line);
			printString("Available commands:");
			printString(new_line);
			printString(new_line);
			printString("\tsetReference");
			printString(new_line);
			printString(new_line);
			printString("\tsetFrequency");
			printString(new_line);
			printString(new_line);
			printString("\tsetOutputPower");
			printString(new_line);
			printString(new_line);
			printString("\tlockStatus");
			printString(new_line);
			printString(new_line);
			printString("\tsetupChargePump");
			printString(new_line);
			printString(new_line);
			printString("\tsleep");
			printString(new_line);
			printString(new_line);
			printString(new_line);
			printString("Enter command: ");
		}




	} // End while loop



	return 0;
}


